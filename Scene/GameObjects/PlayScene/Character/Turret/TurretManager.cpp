#include"pch.h"
#include"TurretManager.h"

#include"TurretCustom_00.h"

#include"Scene/GameObjects/PlayScene/Character/Player/Player.h"
using namespace DirectX;

#define ENEMY_00_COUNT					(10)
#define ENEMY_01_COUNT					(0)
#define ENEMY_02_COUNT					(0)

TurretManager::TurretManager() :
	m_killCount(),
	m_generationTime()
{
	for (int i = 0; i < ENEMY_00_COUNT; i++)
	{
		std::unique_ptr<Turret> turret = std::make_unique<TurretCustom_00>(40000,200);
		m_turretList.push_back(std::move(turret));
	}
}

TurretManager::~TurretManager()
{

}

//ゲームの初期化を行う関数
void TurretManager::Intialize(
	BulletManager* bulletManager,
	AirshipManager* airhhipManager,
	Floor* floor,
	SandstormManager* sandstormManager
)
{	
	//すべての球を未使用状態にする
	for (int i = 0; i < m_turretList.size(); i++)
	{
		m_turretList[i]->SetpositionRandam(-400, 400);
		m_turretList[i]->Initialize(bulletManager, this, airhhipManager,  floor, sandstormManager);
	}
}

//ゲームの更新を行う関数
void TurretManager::Update(const float& elapsedTime)
{
	//自動生成の関数
	AutoGenerated();

	//球の更新
	for (int i = 0; i < m_turretList.size(); i++)
	{
		if (!m_turretList[i]->GetSurvival())
		{
			continue;
		}
		m_turretList[i]->Update(elapsedTime);
	}
	//自動生成の時間をたす
	m_generationTime += elapsedTime;
}

//ゲームの更新処理を行う関数
void TurretManager::Render()
{
	//球の描画
	for (auto& enemyList : m_turretList)
	{
		//敵が生きているか
		if (!enemyList->GetSurvival())
			continue;

		//視界に入っているか
		if (Draw::GetInstance()->DistanceRange(enemyList->GetPosition()))
			continue;

		enemyList->Render();

	}
}

//ゲームの終了処理を行う関数。解放処理が必要な場合　（Release関数などを呼び出す）は、この関数内でしょるする
void TurretManager::Finalize()
{
	//球の描画
	for (auto& enemyList : m_turretList)
	{
		enemyList.reset();
	}
}

//敵を自動生成する
void TurretManager::AutoGenerated()
{
	//１秒ごとに敵を生成
	if (m_generationTime >= 0.01f)
	{	
		//発射可能な球を探す
		for (auto& enemyList : m_turretList)
		{
			//生きているなら次へ
			if (enemyList->GetSurvival())	
				continue;

			//使用されてないなら初期化
			enemyList->SetpositionRandam(-150, 150);
			//現在の状態を初期化（リセットをしてスピードなどが０になっているから）
			enemyList->Reset();

			//生成時間を初期化
			m_generationTime = 0;

			//処理を中断する
			break;
		}
	}

}

void TurretManager::CheckHitCharacter(Player* player)
{	
	////プレイヤーとの当たり判定
	for (int i = 0; i < m_turretList.size(); i++)
	{
		//死んでいたら更新しない
		if (!m_turretList[i]->GetSurvival())
			continue;

		//大まかなプレイヤーと大まかな敵の当たり判定
		if (!m_turretList[i]->GetCollider()->CheckHitSphere(player->GetCollider()))
			continue;

		//プレイヤーのパーツと敵のパーツの当たり判定
		for (auto& airshipParts : m_turretList[i]->GetParts())
		{
			//直したほうがいい（）パーツと大枠のプレイヤーで当たり判定を行い
			//当たったら当たったパーツを返す当たってなかったら"null"
			if (!airshipParts->CollisionPlayer(player))
				continue;

			player->Damage(player->GetHP());

		}
	}
}

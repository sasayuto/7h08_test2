#include"pch.h"
#include"AirshipManager.h"
#include"Scene/GameObjects/PlayScene/Character/Player/Player.h"
#include"Scene/GameObjects/PlayScene/Character/Enemy/Enemy.h"
#include"AirshipCustom_00.h"
using namespace DirectX;

const int Airship_00_COUNT(2);			//飛行船＿０１の数
const int Airship_01_COUNT(0);			//飛行船＿０２の数

AirshipManager::AirshipManager() :
	m_killCount(),
	m_generationTime(),
	m_pBulletManager(nullptr),
	m_pPlayer(nullptr)
{
	for (int i = 0; i < Airship_00_COUNT; i++)
	{
		//飛行船のインスタンスを生成
		auto enemy = std::make_unique<AirshipCustom_00>(1000,1000000,100000);

		//配列に入れる
		m_airshipList.push_back(std::move(enemy));
	}
}

AirshipManager::~AirshipManager()
{

}

//ゲームの初期化を行う関数
void AirshipManager::Intialize(
	BulletManager* bulletManager,
	Player* player,
	ObjectsManager* objectsManager
)
{

	//球のポインタを取得
	m_pBulletManager = bulletManager;

	//プレイヤーのポインタを取得
	m_pPlayer = player;

	//オブジェクトのポインタを取得
	m_pObjectsManager = objectsManager;

	for (int i = 0; i < m_airshipList.size(); i++)
	{
		//ランダムな位置
		m_airshipList[i]->SetpositionRandam(-200, 200);

		//初期化
		m_airshipList[i]->Initialize(m_pBulletManager, m_pObjectsManager,m_pPlayer);
	}
}

//ゲームの更新を行う関数
void AirshipManager::Update(const float& elapsedTime)
{
	//自動生成の関数
	AutoGenerated();

	//球の更新
	for (int i = 0; i < m_airshipList.size(); i++)
	{
		if (!m_airshipList[i]->GetSurvival())
			continue;

		//飛行船の更新
		m_airshipList[i]->Update(elapsedTime);
	}

	//自動生成の時間をたす
	m_generationTime += elapsedTime;
}

//ゲームの更新処理を行う関数
void AirshipManager::Render()
{
	//球の描画
	for (auto& airshipList : m_airshipList)
	{
		//敵が生きているか
		if (!airshipList->GetSurvival())
			continue;

		//視界に入っているか
		if (Draw::GetInstance()->DistanceRange(airshipList->GetPosition()))
			continue;

		airshipList->Render();
	}
}

void AirshipManager::RenderShadowTex()
{	//球の描画
	for (auto& airshipList : m_airshipList)
	{
		//敵が生きているか
		if (!airshipList->GetSurvival())
			continue;

		//視界に入っているか
		if (Draw::GetInstance()->DistanceRange(airshipList->GetPosition()))
			continue;

		airshipList->RenderShadowTex();
	}

}

//ゲームの終了処理を行う関数。解放処理が必要な場合　（Release関数などを呼び出す）は、この関数内でしょるする
void AirshipManager::Finalize()
{
	//球の描画
	for (auto& airshipList : m_airshipList)
	{
		airshipList.reset();
	}
}

//敵を自動生成する
void AirshipManager::AutoGenerated()
{
	//１秒ごとに敵を生成
	if (m_generationTime >= 0.01f)
	{	
		//発射可能な球を探す
		for (auto& airshipList : m_airshipList)
		{
			//生きているなら次へ
			if (airshipList->GetSurvival())	continue;

			//使用されてないなら初期化
			airshipList->Reset();
			airshipList->GetIState()->Initialize();
			airshipList->SetpositionRandam(-400, 400);

			//生成時間を初期化
			m_generationTime = 0;

			//処理を中断する
			break;
		}
	}
}
void AirshipManager::CheckHitEnemy(Enemy* enemy)
{
	//プレイヤーとの当たり判定
	for (int i = 0; i < m_airshipList.size(); i++)
	{
		//敵が生きているか
		if (!m_airshipList[i]->GetSurvival())
			continue;

		//大まかなプレイヤーと大まかな敵の当たり判定
		if (!m_airshipList[i]->GetCollider()->CheckHitSphere(enemy->GetCollider()))
			continue;

		for (auto& airshipParts : m_airshipList[i]->GetParts())
		{
			//直したほうがいい（）パーツと大枠のプレイヤーで当たり判定を行い
			//当たったら当たったパーツを返す当たってなかったら"null"
				//プレイヤーのパーツと大まかな敵の当たり判定
				if (!airshipParts->CollisionEnemy(enemy))
					continue;

				//当たっていたらダメージ処理
				enemy->Damage(enemy->GetHP());
				return;
			}
	}
}

void AirshipManager::CheckHitPlayer(Player* player)
{	
	//プレイヤーとの当たり判定
	for (int i = 0; i < m_airshipList.size(); i++)
	{
		//敵が生きているか
		if (!m_airshipList[i]->GetSurvival())
			continue;

		//大まかなプレイヤーと大まかな敵の当たり判定
		if (!m_airshipList[i]->GetCollider()->CheckHitSphere(player->GetCollider()))
			continue;

		//プレイヤーのパーツと敵のパーツの当たり判定
		for (auto& airshipParts : m_airshipList[i]->GetParts())
		{

			//プレイヤーのパーツと大まかな敵の当たり判定
			if (!airshipParts->CollisionPlayer(player))
				continue;

			//当たっていたらダメージ処理
			player->Damage(player->GetHP());
			return;
		}
	}
}

#include"pch.h"
#include"SandstormManager.h"

#include"Scene/GameObjects/PlayScene/Character/Player/Player.h"
using namespace DirectX;

#define ENEMY_00_COUNT					(2)

SandstormManager::SandstormManager() :
	m_killCount(),
	m_generationTime()
{
	for (int i = 0; i < ENEMY_00_COUNT; i++)
	{
		std::unique_ptr<SandstormEffect> enemy = std::make_unique<SandstormEffect>();
		m_sandstormEffect.push_back(std::move(enemy));
	}
}

SandstormManager::~SandstormManager()
{

}

//ゲームの初期化を行う関数
void SandstormManager::Intialize(
	BulletManager* bulletManager,
	BenchManager* benchManager,
	StreetLightManager *streetLightManager
)
{
	//すべての球を未使用状態にする
	for (int i = 0; i < m_sandstormEffect.size(); i++)
	{
		m_sandstormEffect[i]->SetpositionRandam(-150, 150);
		m_sandstormEffect[i]->Initialize(benchManager, streetLightManager);
		m_sandstormEffect[i]->SetSurvival(false);
	}
}

//ゲームの更新を行う関数
void SandstormManager::Update(const float& elapsedTime)
{
	//自動生成の関数
	AutoGenerated();

	//球の更新
	for (int i = 0; i < m_sandstormEffect.size(); i++)
	{
		//生きているか
		if (!m_sandstormEffect[i]->GetSurvival())
			continue;

		//描画距離か
		if (Draw::GetInstance()->DespawnDistance(m_sandstormEffect[i]->GetPosition(), 300.0f))
			m_sandstormEffect[i]->SetSurvival(false);

		m_sandstormEffect[i]->Update(elapsedTime);
	}
	//自動生成の時間をたす
	m_generationTime += elapsedTime;
}

//ゲームの更新処理を行う関数
void SandstormManager::Render()
{
	//球の描画
	for (auto& enemyList : m_sandstormEffect)
	{
		//敵が生きているか
		if (!enemyList->GetSurvival())
			continue;
		//視界に入っているか
		if (Draw::GetInstance()->DistanceRange(enemyList->GetPosition()))
			continue;

		enemyList->Render();

	}
}

//ゲームの終了処理を行う関数。解放処理が必要な場合　（Release関数などを呼び出す）は、この関数内でしょるする
void SandstormManager::Finalize()
{
	//球の描画
	for (auto& enemyList : m_sandstormEffect)
	{
		enemyList.reset();
	}
}

//敵を自動生成する
void SandstormManager::AutoGenerated()
{
	//１秒ごとに敵を生成
	if (m_generationTime <= 0.1f)
		return;

		//発射可能な球を探す
	for (auto& enemyList : m_sandstormEffect)
	{
		//生きているなら次へ
		if (enemyList->GetSurvival())
			continue;

		//使用されてないなら初期化
		enemyList->SetSurvival(true);
		enemyList->SetpositionRandam(-150, 150);

		//生成時間を初期化
		m_generationTime = 0;

		//処理を中断する
		break;
	}
	

}

void SandstormManager::CheckHitCharacter(Player* player)
{	
	//プレイヤーとの当たり判定
	for (int i = 0; i < m_sandstormEffect.size(); i++)
	{
		//敵が生きているか
		if (!m_sandstormEffect[i]->GetSurvival())		continue;

		//大まかなプレイヤーと大まかな敵の当たり判定
		if (!player->GetCollider()->CheckHitSphereBox(m_sandstormEffect[i]->GetCollider()))
			continue;

		for (auto& playerParts : player->GetParts())
		{
			//プレイヤーのパーツと大まかな敵の当たり判定
			if (!playerParts->CollisionSandstorm(m_sandstormEffect[i].get()))
				continue;

			player->SetGravity(-0.2f);
			player->Damage(m_sandstormEffect[i]->SANDSTORM_OFFENSIVE_POWER);
		}
	}
}
void SandstormManager::CheckHitEnemy(Enemy* enemy)
{
	//プレイヤーとの当たり判定
	for (int i = 0; i < m_sandstormEffect.size(); i++)
	{
		//敵が生きているか
		if (!m_sandstormEffect[i]->GetSurvival())		continue;

		//大まかなプレイヤーと大まかな敵の当たり判定
		if (!enemy->GetCollider()->CheckHitSphereBox(m_sandstormEffect[i]->GetCollider()))
			continue;

		for (auto& enemyParts : enemy->GetParts())
		{
			//プレイヤーのパーツと大まかな敵の当たり判定
			if (!enemyParts->CollisionSandstorm(m_sandstormEffect[i].get()))
				continue;

			enemy->SetGravity(-0.2f);
			enemy->Damage(m_sandstormEffect[i]->SANDSTORM_OFFENSIVE_POWER);
		}
	}

}
